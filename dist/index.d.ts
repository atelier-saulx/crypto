export declare const generateKeyPair: () => Promise<{
    publicKey: string;
    privateKey: string;
}>;
/**
 * Signs the payload and returns it bundled with
 * the signature in base64 encoding.
 * Expects a RSA key as the publicKey.
 * Supports strings or objects as payload.
 * NOTE: If payload is also encrypted you
 * should not use the same key pair to encrypt
 * and sign
 */
export declare const sign: (payload: string | object, privateKey: string) => string;
/**
 * Verifies a payload previously signed with the sign() function.
 * Will return either a string or an object if the payload signed was
 * an object.
 */
export declare const verify: <T extends string | object>(payload: string, publicKey: string) => T;
/**
 * Encrypts a string with hybrid encryption.
 * Expects a RSA key as the publicKey
 */
export declare const encrypt: (payload: string, publicKey: string) => string;
/**
 * Decrypts a cipher string generated by the encrypt method.
 * Expects the matching RSA private key.
 */
export declare const decrypt: (payload: string, privateKey: string) => string;
